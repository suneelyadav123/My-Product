require 'rails_helper'

RSpec.describe CustomersController, type: :controller do

	let(:valid_attributes){
			{
				
				first_name: "sam",
				last_name: "yadav",
				address_line1: "2-3-5",
				address_line2: "old Town",
				city: "repalle",
				state: "Ap",
				zip_code: "yt",
				lat: "23.44000",
				lng: "18.33000"
			}
			
		}
	let(:invalid_attributes){
			{
				
				first_name: nil,
				last_name: nil,
				address_line1: nil,
				address_line2: nil,
				city: nil,
				state: nil,
				zip_code: nil,
				lat:  nil,
				lng: nil
			}
			
		}
	

  describe "GET #index" do
    it "assigns all customers as @customers" do
      customer = Customer.create! valid_attributes
      get :index
      expect(assigns(:customers)).to eq([customer])
    end
    it "renders the index template" do
      get :index
      expect(response).to render_template("index")
    end
  end

  describe "GET #show" do
    it "assigns the requested widget as @customer" do
        customer = Customer.create! valid_attributes
      get :show , id: customer
      expect(assigns(:customer)).to eq(customer)
    end
    it "renders the show template" do
      customer = Customer.create! valid_attributes
      get :show , id: customer
      expect(response).to render_template("show")
    end
  end

  describe "GET #edit" do
    it "assigns the requested widget as @widget" do
      customer = Customer.create! valid_attributes
      get :edit ,id: customer
      expect(assigns(:customer)).to eq(customer)
    end
    it "renders the edit template" do
      customer = Customer.create! valid_attributes
      get :edit , id: customer
      expect(response).to render_template("edit")
    end
  end
	describe "POST #create" do
		context "with valid params" do
		  it "creates a new Customer" do
		    expect {
		      post :create, {:customer => valid_attributes}
			}.to change(Customer, :count).by(1)
		  end

		  it "assigns a newly created customer as @customer" do
		    post :create , {:customer => valid_attributes} 
		    expect(assigns(:customer)).to be_a(Customer)
		    expect(assigns(:customer)).to be_persisted
		  end

		  it "redirects to the created customer" do
		    post :create, {:customer => valid_attributes }
			expect(response).to redirect_to(Customer.last)
		  end
		end
	end
  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
        
        first_name: "fhfd",
        last_name: "fgdf",
        address_line1: "hfhdf",
        address_line2: "shdbhj",
        city: "dhjg",
        state: "Ap",
        zip_code: "yt",
        lat: "23.44000",
        lng: "18.33000"
      }
      }

      it "updates the requested customer" do
        customer = Customer.create! valid_attributes
        put :update, {id: customer, customer: new_attributes}
        customer.reload
        
      end

      it "assigns the requested customer as @customer" do
        customer = Customer.create! valid_attributes
        put :update,  {id: customer, customer: new_attributes}
        expect(assigns(:customer)).to eq(customer)
      end

      it "redirects to the customer" do
        customer = Customer.create! valid_attributes
        put :update, {id: customer, customer: new_attributes}
        expect(response).to redirect_to(customer)
      end
    end

  end

  describe "DELETE #destroy" do
    it "destroys the requested customer" do
      customer = Customer.create! valid_attributes
      expect {
        delete :destroy, {id: customer}
      }.to change(Customer, :count).by(-1)
    end

    it "redirects to the widgets list" do
      customer = Customer.create! valid_attributes
      delete :destroy, {id: customer}
      expect(response).to redirect_to(customers_url)
    end
  end
end